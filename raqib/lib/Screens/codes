// body: Stack(
      //   fit: StackFit.expand,
      //   children: [

      //     // GRAD VIEW
      //     GridView.builder(
      //       gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
      //         crossAxisCount: 3
      //         ),
      //        itemBuilder: (context, index){
      //         return Card();
      //        }
      //        ),
        
      //   Container(
      //     decoration: BoxDecoration(
      //       border: 
      //       Border.all(width: 2, color: them),
      //     ),
      //   )
        
      //   ],
      // ),
      // body: _pages.elementAt(_currentIndex),
      // backgroundColor: Colors.blue,
      // bottomNavigationBar: ConvexAppBar(
      //   items: [
      //     TabItem(icon: Icon(Icons.edit_document), title: "Documents"),
      //     TabItem(icon: Icon(Icons.newspaper), title: "Actualites"),
      //     TabItem(icon: Icon(Icons.dangerous), title: "Signaler",),
      //     TabItem(icon: Icon(Icons.menu), title: "Menu"),
      //   ],

      //   initialActiveIndex: _currentIndex,
      //   backgroundColor: Colors.green,
      //   activeColor: Colors.white,
      //   color: Colors.black,
      //   height: 60,
        
      //   //currentIndex: _currentIndex,
      //   //selectedFontSize: 30,
      //   //selectedItemColor: Colors.teal,
      //   //unselectedItemColor: Colors.grey,
      //   onTap: _changeItem,
      //   ),
        //=====================================================
    



    // ndkVersion = flutter.ndkVersion

    //=======================================================
    register Screen page:
    import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:raqib/Screens/otp.dart';
import 'package:raqib/Services/auth_services.dart';
import 'package:raqib/Services/globals.dart';

class RegisterScreen extends StatefulWidget {
  const RegisterScreen({Key? key}) : super(key: key);

  @override
  _RegisterScreenState createState() => _RegisterScreenState();
}

class _RegisterScreenState extends State<RegisterScreen> {
  final _formKey = GlobalKey<FormState>();
  String _name = '';
  String _NNI = '';
  String _phone_num = '';
  String _password = '';
  String _confirmPassword = '';
  String _role = 'citoyen';

  Future<void> _register() async {
  if (!_formKey.currentState!.validate()) return;

  try {
    final response = await AuthServices.register(
      _name,
      _NNI,
      _phone_num,
      _password,
      _role,
    );

    print("Full server response: ${response.body}"); // Print the *entire* response

    final responseData = json.decode(response.body);

    if (response.statusCode == 200) {
      // Registration was successful
      print("Registration successful! Response Data: $responseData");
      Navigator.pushReplacement(
        context,
        MaterialPageRoute(
          builder: (context) => OPT_Page(),
          settings: RouteSettings(arguments: _phone_num),
        ),
      );
    } else {
      // Registration failed, handle errors from backend
      print("Registration failed! Response Data: $responseData");
      String errorMessage = 'Registration failed'; // Default message

      if (responseData is Map<String, dynamic>) {
        if (responseData.containsKey('errors')) {
          final errors = responseData['errors'] as Map<String, dynamic>;
          if (errors.isNotEmpty) {
            errorMessage = errors.values.first[0].toString();
          }
        } else if (responseData.containsKey('message')) {
          errorMessage = responseData['message'].toString();
        }
      }
      _showErrorDialog(errorMessage); //show the error
    }
  } catch (e) {
    // Handle network errors or exceptions during the process
    print("Error during registration: $e");
    _showErrorDialog('Registration error: ${e.toString()}');
  }
}


  // Function to show an error dialog
  void _showErrorDialog(String message) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('Error'),
          content: Text(message),
          actions: <Widget>[
            TextButton(
              onPressed: () {
                Navigator.of(context).pop(); // Close the dialog
              },
              child: const Text('OK'),
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Register')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: SingleChildScrollView(
            child: Column(
              children: [
                // NAME FIELD
                TextFormField(
                  decoration: const InputDecoration(labelText: 'Full Name'),
                  validator: (value) {
                    if (value == null || value.length < 3) {
                      return 'Name must be at least 3 characters';
                    }
                    return null;
                  },
                  onChanged: (value) => _name = value,
                ),
                const SizedBox(height: 10),
                // NNI FIELD
                TextFormField(
                  decoration: const InputDecoration(labelText: 'NNI (10 digits)'),
                  keyboardType: TextInputType.number,
                  inputFormatters: [
                    FilteringTextInputFormatter.digitsOnly,
                    LengthLimitingTextInputFormatter(10),
                  ],
                  validator: (value) {
                    if (value == null ||
                        value.length != 10 ||
                        !RegExp(r'^[0-9]{10}$').hasMatch(value)) {
                      return 'NNI must be exactly 10 digits';
                    }
                    return null;
                  },
                  onChanged: (value) => _NNI = value,
                ),
                const SizedBox(height: 10),
                // PHONE NUMBER FIELD
                TextFormField(
                  decoration: const InputDecoration(
                    labelText: 'Phone Number (min 8 digits)',
                  ),
                  keyboardType: TextInputType.phone,
                  inputFormatters: [FilteringTextInputFormatter.digitsOnly],
                  validator: (value) {
                    if (value == null ||
                        value.length < 8 ||
                        !RegExp(r'^[0-9]{8,}$').hasMatch(value)) {
                      return 'Phone must be at least 8 digits';
                    }
                    return null;
                  },
                  onChanged: (value) => _phone_num = value,
                ),
                const SizedBox(height: 10),
                // PASSWORD FIELD
                TextFormField(
                  decoration: const InputDecoration(
                    labelText: 'Password',
                  ),
                  keyboardType: TextInputType.phone,
                  obscureText: true,
                  validator: (value) {
                    if (value == null || value.length < 4) {
                      return 'Password must be at least 4 characters';
                    }
                    return null;
                  },
                  onChanged: (value) => _password = value,
                ),
                const SizedBox(height: 10),
                // CONFIRM PASSWORD FIELD
                TextFormField(
                  decoration: const InputDecoration(
                    labelText: 'Repeat the password',
                  ),
                  keyboardType: TextInputType.phone,
                  obscureText: true,
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Confirm your password';
                    }
                    if (value != _password) {
                      return 'Passwords do not match';
                    }
                    return null;
                  },
                  onChanged: (value) => _confirmPassword = value,
                ),
                const SizedBox(height: 19),
                // ROLE SELECTION DROPDOWN
                RoleDropdown(
                  initialRole: _role,
                  onRoleSelected: (String? role) {
                    if (role != null) {
                      _role = role;
                    }
                  },
                ),
                const SizedBox(height: 20),
                ElevatedButton(
                  onPressed: _register,
                  child: const Text('Register'),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

class RoleDropdown extends StatefulWidget {
  final void Function(String?) onRoleSelected;
  final String initialRole;

  RoleDropdown({required this.onRoleSelected, this.initialRole = 'citoyen'});

  @override
  _RoleDropdownState createState() => _RoleDropdownState();
}

class _RoleDropdownState extends State<RoleDropdown> {
  String? _selectedRole;

  @override
  void initState() {
    super.initState();
    _selectedRole = widget.initialRole;
  }

  @override
  Widget build(BuildContext context) {
    return DropdownButtonFormField<String>(
      value: _selectedRole,
      onChanged: (String? newValue) {
        setState(() {
          _selectedRole = newValue;
        });
        widget.onRoleSelected(newValue);
      },
      items: <String>['citoyen', 'chef', 'admin']
          .map<DropdownMenuItem<String>>((String value) {
        return DropdownMenuItem<String>(
          value: value,
          child: Text(value),
        );
      }).toList(),
      decoration: InputDecoration(
        labelText: 'RÃ´le',
        border: OutlineInputBorder(),
      ),
      validator: (value) {
        if (value == null || value.isEmpty) {
          return 'Veuillez sÃ©lectionner un rÃ´le';
        }
        return null;
      },
    );
  }
}

//==========================================================
 register Function: 

  Future<void> _register() async {
  if (!_formKey.currentState!.validate()) return;

  try {
    final response = await AuthServices.register(
      _name,
      _NNI,
      _phone_num,
      _password,
      _role,
    );

    print("Full server response: ${response.body}"); // Print the *entire* response

    final responseData = json.decode(response.body);

    if (response.statusCode == 200) {
      // Registration was successful
      print("Registration successful! Response Data: $responseData");
      Navigator.pushReplacement(
        context,
        MaterialPageRoute(
          builder: (context) => OPT_Page(),
          settings: RouteSettings(arguments: _phone_num),
        ),
      );
    } else {
      // Registration failed, handle errors from backend
      print("Registration failed! Response Data: $responseData");
      String errorMessage = 'Registration failed'; // Default message

      if (responseData is Map<String, dynamic>) {
        if (responseData.containsKey('errors')) {
          final errors = responseData['errors'] as Map<String, dynamic>;
          if (errors.isNotEmpty) {
            errorMessage = errors.values.first[0].toString();
          }
        } else if (responseData.containsKey('message')) {
          errorMessage = responseData['message'].toString();
        }
      }
      _showErrorDialog(errorMessage); //show the error
    }
  } catch (e) {
    // Handle network errors or exceptions during the process
    print("Error during registration: $e");
    _showErrorDialog('Registration error: ${e.toString()}');
  }
}
//===============================================================================
verify:

static Future<http.Response> verify(String name, String phoneNum) async {
    try {
      final Map<String, dynamic> data = {
        "name": name,
        "phone_num": phoneNum,
      };

      final response = await http.post(
        Uri.parse('${baseURL}auth/verify'), //  Endpoint
        headers: headers,
        body: json.encode(data),
      );

      print('Verify Response: ${response.body}');

      if (response.statusCode == 200) {
        return response; // Return the successful response
      } else {
        final Map<String, dynamic> errorResponse = json.decode(response.body);
        if (errorResponse.containsKey('errors')) {
          throw Exception(errorResponse['errors']);
        } else {
          throw Exception(
              'Failed to verify. Status Code: ${response.statusCode}');
        }
      }
    } catch (e) {
      print('Verify Error: $e');
      rethrow;
    }
  }
//============
validateUser:

static Future<http.Response> validateUser(
      String name, String nni, String phoneNum, String password, String roles) async {
    try {
      final Map<String, dynamic> data = {
        "name": name,
        "NNI": nni,
        "phone_num": phoneNum,
        "mdp": password,
        "role": roles,
      };

      final response = await http.post(
        Uri.parse('${baseURL}auth/validateUser'), // Endpoint
        headers: headers,
        body: json.encode(data),
      );

      print('ValidateUser Response: ${response.body}');

      if (response.statusCode == 200) {
        return response;
      } else {
        final Map<String, dynamic> errorResponse = json.decode(response.body);
        if (errorResponse.containsKey('errors')) {
          throw Exception(errorResponse['errors']);
        } else {
          throw Exception(
              'Failed to validate user. Status Code: ${response.statusCode}');
        }
      }
    } catch (e) {
      print('ValidateUser Error: $e');
      rethrow;
    }
  }

//============


  
  
  public function login(Request $req)
{
    // validate inputs (using Validator::make)
    $rules = [
        'name' => 'required|string|min:3|max:255',
        'mdp' => 'required|string|min:4|max:4',
        'role' => 'required|string|in:admin,citoyen,chef', 
    ];
    $validator = Validator::make($req->all(), $rules);
    if ($validator->fails()) {
        return response()->json($validator->errors(), 400);
    }

    // find user by name
    $user = User::where('name', $req->name)->first();

    // if user exists and password and role is correct
    if ($user && Hash::check($req->mdp, $user->mdp) && $user->role == $req->role) { 
        $token = $user->createToken('Personal Access Token')->plainTextToken;
        $response = ['user' => $user, 'token' => $token];
        return response()->json($response, 200);
    }
    $response = ['message' => 'Incorrect name, password or role!']; 
    return response()->json($response, 400);
}






public function login(Request $req)
{
    // Valider les entrÃ©es (en utilisant Validator::make)
    $rules = [
        'name' => 'required|string|min:3|max:255',
        'mdp' => 'required|string|min:4|max:4',
        'role' => 'required|string|in:admin,citoyen,chef', // Validation du rÃ´le ajoutÃ©e
    ];
    $validator = Validator::make($req->all(), $rules);
    if ($validator->fails()) {
        return response()->json($validator->errors(), 400);
    }

    // Trouver l'utilisateur par nom
    $user = User::where('name', $req->name)->first();

    // Si l'utilisateur existe et que le mot de passe et le rÃ´le sont corrects
    if ($user) {
        if (!Hash::check($req->mdp, $user->mdp)) {
            $response = ['message' => 'Mot de passe incorrect.'];
            return response()->json($response, 400);
        }
        if ($user->role != $req->role) {
            $response = ['message' => 'RÃ´le incorrect.'];
            return response()->json($response, 400);
        }
        $token = $user->createToken('Personal Access Token')->plainTextToken;
        $response = ['user' => $user, 'token' => $token];
        return response()->json($response, 200);
    } else {
        $response = ['message' => 'Nom d\'utilisateur incorrect.'];
        return response()->json($response, 400);
    }
    
    //Ce code ne sera jamais atteint, mais il est conservÃ© pour plus de sÃ©curitÃ©.
    $response = ['message' => 'Erreur de connexion inconnue.'];
    return response()->json($response, 400);
}





login first:

String _name = '';
  String _password = '';

  Future<void> _login() async {
    if (!_formKey.currentState!.validate()) return;

    try {
      final response = await AuthServices.login(_name, _password);
      final responseData = json.decode(response.body);

      if (response.statusCode == 200) {
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(builder: (context) => HomeScreen()),
        );
      } else {
        final errorMessage =
            responseData['message'] ?? 'Incorrect name or password';
        errorSnackBar(context, errorMessage.toString());
      }
    } catch (e) {
      errorSnackBar(context, 'Login error: ${e.toString()}');
    }
  }











static Future<http.Response> login(String name, String password, String role) async {
    try {
      final Map<String, dynamic> data = {
        "name": name,
        "mdp": password,
        "role": role
      };

      final response = await http.post(
        Uri.parse('${Constants.baseURL}auth/login'),
        headers: Constants.headers,
        body: json.encode(data),
      );

      print('Login Response: ${response.body}');
      if (response.statusCode == 200) {
        return response;
      } else {
        // If it's not a 200, parse the error message and throw an exception
        final Map<String, dynamic> errorResponse = json.decode(response.body);
        if (errorResponse.containsKey('mdp')) {
          throw Exception(errorResponse['mdp'][0]);
        } else if (errorResponse.containsKey('role')) {
          throw Exception(errorResponse['role'][0]); 
        }
        else if (errorResponse.containsKey('message')) {
          throw Exception(errorResponse['message']);
        } else {
          throw Exception('Failed to login. Status Code: ${response.statusCode}');
        }
      }
    } catch (e) {
      print('Login Error: $e');
      rethrow; 
    }
  }













  import 'package:flutter/material.dart';

class ComplaintProcessPage extends StatelessWidget {
  const ComplaintProcessPage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFFFFFFFF), // White background
      appBar: AppBar(
        backgroundColor: const Color.fromARGB(255, 45, 205, 9), // Green AppBar
        title: const Text(
          'Complaint Process', // English title, you can change it to Arabic
          style: TextStyle(color: Colors.white, fontSize: 20.0),
        ),
        centerTitle: true,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: <Widget>[
            Image.asset(
              'WhatsApp Image 2025-04-21 at 1.22.40 PM.jpeg', // Replace with your image asset path
              height: 250, // Adjust as needed
              fit: BoxFit.contain, // Or any other BoxFit property
            ),
            const SizedBox(height: 20),
            const Text(
              'ÙÙ Ø§ÙØ¨Ø¯Ø§ÙØ© ÙØ­Ù ÙÙØµØ­ Ø£Ù ØªØªØ¬Ù Ø¥ÙÙ ÙÙØ§Ù Ø§ÙØ´Ø±Ø§Ø¡ ÙØ­Ù Ø§ÙØ´ÙÙÙ ÙØ¯ÙØ§ÙØ ÙÙÙ Ø­Ø§ÙØ© Ø¹Ø¯Ù ØªÙÙÙÙ ÙÙ Ø­Ù Ø§ÙØ´ÙÙÙ ÙØ¯ÙØ§Ù ÙØ±Ø¬Ù Ø§ÙØªÙØ¬Ù Ø¥ÙÙ Ø£ÙØ±Ø¨ Ø¬ÙØ¹ÙØ© ÙØ­ÙØ§ÙØ© Ø§ÙÙØ³ØªÙÙÙ ÙÙØ³Ø§Ø¹Ø¯ØªÙ ÙÙ Ø­Ù Ø§ÙØ´ÙÙÙ ÙØ¨Ù Ø§ÙØªÙØ¬Ù ÙÙØ¬ÙØ§Ø² ÙØªÙØ¯ÙÙ Ø§ÙØ´ÙÙÙ.',
              textAlign: TextAlign.center,
              style: TextStyle(
                color: Colors.black, // Set to black or your desired text color
                fontSize: 18.0, // Adjust as needed
                fontFamily:
                    'Arial', // Or a suitable Arabic font if needed.  Make sure you have added the font.
              ),
            ),
          ],
        ),
      ),
    );
  }
}




final _Controller = PageController();

SizedBox(
  height: 500
)















body: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: <Widget>[
              const SizedBox(height: 20.0),
              Expanded(
                child: GridView.count(
                  crossAxisCount: 2,
                  mainAxisSpacing: 16.0,
                  crossAxisSpacing: 16.0,
                  children: <Widget>[
                    _buildDashboardCard(
                      context: context,
                      title: 'Visitors',
                      icon: Icons.people_outline,
                      gradientColors: const [
                        Color.fromARGB(255, 93, 203, 150),
                        Color.fromARGB(255, 222, 152, 12),
                      ],
                      onTap: () {
                        Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (context) => ChefLoginScreen(),
                          ),
                        );
                      },
                    ),
                    _buildDashboardCard(
                      context: context,
                      title: 'MOM',
                      icon: Icons.meeting_room_outlined,
                      gradientColors: const [
                        Color.fromARGB(255, 71, 60, 59),
                        Color(0xFFff5722),
                      ],
                      onTap: () {},
                    ),
                    _buildDashboardCard(
                      context: context,
                      title: 'Help Desk',
                      icon: Icons.question_answer_outlined,
                      gradientColors: const [
                        Color(0xFF2196f3),
                        Color(0xFF03a9f4),
                      ],
                      onTap: () {},
                    ),
                    _buildDashboardCard(
                      context: context,
                      title: 'Amenities',
                      icon: Icons.location_on_outlined,
                      gradientColors: const [
                        Color(0xFF4caf50),
                        Color(0xFF8bc34a),
                      ],
                      onTap: () {},
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
        bottomNavigationBar: BottomNavigationBar(
          items: const <BottomNavigationBarItem>[
            BottomNavigationBarItem(
              icon: Icon(Icons.people_outline),
              label: 'Community',
            ),
            BottomNavigationBarItem(
              icon: Icon(Icons.person_outline),
              label: 'Personal',
            ),
          ],
          currentIndex: 0,
          selectedItemColor: Colors.blue,
          onTap: (int index) {
            if (index == 0) {
              Navigator.push(
                context,
                MaterialPageRoute(builder: (context) => const Settings()),
              );
            } else if (index == 1) {
              Navigator.push(
                context,
                MaterialPageRoute(builder: (context) => const Personal()),
              );
            }
          },
        ),
      ),
    );
  }

  static Widget _buildDashboardCard({
    required BuildContext context,
    required String title,
    required IconData icon,
    required List<Color> gradientColors,
    required VoidCallback? onTap,
  }) {
    final Color startColor =
        gradientColors.isNotEmpty ? gradientColors.first : Colors.grey;
    final Color endColor =
        gradientColors.length > 1 ? gradientColors.last : startColor;

    return Material(
      color: Colors.transparent,
      child: InkWell(
        onTap: onTap,
        borderRadius: BorderRadius.circular(12.0),
        child: Container(
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(12.0),
            gradient: LinearGradient(
              colors: gradientColors,
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.2),
                spreadRadius: 2,
                blurRadius: 5,
                offset: const Offset(0, 3),
              ),
            ],
          ),
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              crossAxisAlignment: CrossAxisAlignment.center,
              children: <Widget>[
                Align(
                  alignment: Alignment.topLeft,
                  child: Container(
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(10),
                      color: endColor.withOpacity(
                        0.2,
                      ),
                    ),
                    padding: const EdgeInsets.all(8),
                    child: Icon(icon, size: 40.0, color: Colors.white),
                  ),
                ),
                const SizedBox(height: 8.0),
                Text(
                  title,
                  style: const TextStyle(
                    fontSize: 16.0,
                    fontWeight: FontWeight.bold,
                    color: Colors.white,
                  ),
                  textAlign: TextAlign.center,
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }





context.read<ChefNotification>().Plainte_notification(details: _detailsController)